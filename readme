ecommerce_project/
│
├── main.cpp                      // Handles menu navigation
│
├── /include                      // All header (.h) files
│   ├── User.h
│   ├── Customer.h
│   ├── Admin.h
│   ├── Product.h
│   ├── Cart.h
│   ├── Payment.h
│   ├── UPI.h
│   ├── CardPayment.h
│   ├── NetBanking.h
│
├── /src                          // All class implementations (.cpp)
│   ├── User.cpp
│   ├── Customer.cpp
│   ├── Admin.cpp
│   ├── Product.cpp
│   ├── Cart.cpp
│   ├── Payment.cpp (if needed)
│   ├── UPI.cpp
│   ├── CardPayment.cpp
│   ├── NetBanking.cpp
│
├── /data                         // Stores persistent data (files)
│   ├── users.txt
│   ├── products.txt
│   ├── orders.txt
│   ├── cart_temp.txt (optional)
│
└── README.md (optional later)




🧱 Source Folder Overview — /src

Each file in /src implements the logic (function bodies) for the classes you defined in /include.

🧍‍♂️ 1️⃣ User.cpp

Implements: User base class functions.
Contains logic for:

Reading and verifying credentials from users.txt.

Registering a new user by writing data to users.txt.

Getters/setters for username, password, and role.

Shared logic that both Admin and Customer will inherit.

🧠 Concepts used: File handling, encapsulation.

👨‍💼 2️⃣ Admin.cpp

Implements: Functions of Admin class (inherited from User).
Contains logic for:

Adding a new product to products.txt.

Updating existing product details (price, stock).

Removing a product by ID.

Viewing all products and all orders.

Admin dashboard menu for interaction.

🧠 Concepts used: Inheritance, file handling, polymorphism (override dashboard).

👤 3️⃣ Customer.cpp

Implements: Functions of Customer class (also from User).
Contains logic for:

Viewing all products (read from products.txt).

Adding selected products to cart (calls Cart class).

Viewing cart and total.

Proceeding to checkout and selecting payment.

Storing confirmed orders in orders.txt.

Dashboard menu for customers.

🧠 Concepts used: Inheritance, operator overloading (cart), encapsulation, file handling.

📦 4️⃣ Product.cpp

Implements: All product-related operations.
Contains logic for:

Setting and getting product details.

Reading and writing product data from products.txt.

Searching products by ID or name.

Deleting a product entry.

🧠 Concepts used: Encapsulation, file handling, data persistence.

🛒 5️⃣ Cart.cpp

Implements: Functions declared in Cart.h.
Contains logic for:

Adding and removing products from the vector.

Viewing current cart contents.

Calculating total price.

Overloaded operator+ for cart + product.

Optionally saving cart temporarily (cart_temp.txt).

🧠 Concepts used: Operator overloading, encapsulation, STL (vector).

💳 6️⃣ Payment.cpp (optional shared file)

If you want, you can keep common helper functions for all payment types here:

Validating payment details.

Generating transaction IDs.

Writing payment status to orders.txt.

🧠 Concepts used: Abstraction, polymorphism.

📱 7️⃣ UPI.cpp

Implements UPIPayment::pay().
Contains logic for:

Asking for UPI ID and PIN.

Validating mock input.

Displaying “Payment Successful” or “Failed”.

🧠 Concepts used: Function overriding (runtime polymorphism).

💳 8️⃣ CardPayment.cpp

Implements CardPayment::pay().
Contains logic for:

Asking for card number, expiry, and CVV.

Simulating validation.

Showing transaction result.

🧠 Concepts used: Function overriding (runtime polymorphism).

🏦 9️⃣ NetBanking.cpp

Implements NetBankingPayment::pay().
Contains logic for:

Asking for bank name and user ID.

Mock login and OTP simulation.

Displaying transaction success.

🧠 Concepts used: Function overriding (runtime polymorphism).